USE sales_db;

-- Unique categories of products sold at all stores.
SELECT DISTINCT Product_Category FROM products;


-- All locations of stores across Mexico
SELECT DISTINCT Store_Location FROM stores;


-- Most stocked product category in each store location
GO
CREATE VIEW most_stocked_product AS
WITH stock AS (
	SELECT s.Store_ID, s.Store_Name, p.Product_Category, 
		SUM(i.Stock_On_Hand) AS stock_count,
			ROW_NUMBER() OVER(PARTITION BY s.Store_Name 
							ORDER BY SUM(i.Stock_On_Hand) DESC) AS row_num
			FROM stores s
			INNER JOIN inventory i ON s.Store_ID = i.Store_ID
			INNER JOIN products p ON p.Product_ID = i.Product_ID
			GROUP BY s.Store_ID, Store_Name, Product_Category
)
SELECT Store_ID, Store_Name, Product_Category, stock_count
	FROM stock
	WHERE row_num = 1;
GO

-- Number of stores opened in every location (by year)
GO
CREATE OR ALTER VIEW number_of_stores AS
SELECT Store_Location, year, COUNT(Store_ID) AS stores_opened
	FROM stores
	GROUP BY Store_Location, year;
GO

-- Number of stores in a location vs the cumulative sales in each location
GO
CREATE VIEW store_sales AS
	SELECT table1.Store_Location, total_stores, total_sales FROM 
		(SELECT Store_Location, COUNT(stores.Store_ID) AS total_stores
			FROM stores
			GROUP BY Store_Location) AS table1
		INNER JOIN (SELECT Store_Location,
						FORMAT(ROUND(SUM(s.Units * p.Product_Price), 2), 
								'C', 'en-us') AS total_sales
							FROM stores INNER JOIN sales s
							ON stores.Store_ID = s.Store_ID
							INNER JOIN products p
							ON s.Product_ID = p.Product_ID
							GROUP BY Store_Location
					) AS table2
		ON table1.Store_Location = table2.Store_Location;
GO

-- Total revenue generated by each product
GO
CREATE OR ALTER VIEW product_sales AS
SELECT p.Product_Name, 
	ROUND(SUM(s.Units * p.Product_Price), 2) AS Total_Sales
	FROM products p
	INNER JOIN sales s ON p.Product_ID = s.Product_ID
	GROUP BY p.Product_Name;
GO

-- Highest performing product each month
GO
CREATE OR ALTER VIEW monthly_top_sales AS
WITH monthly_sales AS (
SELECT p.Product_Name AS Name,
	s.date_month AS Month,
	s.date_year AS year,
	ROUND(SUM(s.Units * p.Product_Price), 2) AS Total_Sales
	FROM products p
	INNER JOIN sales s ON p.Product_ID = s.Product_ID
	GROUP BY p.Product_Name, s.date_month, s.date_year
)
SELECT Name, Month, year, Total_Sales
	FROM (
		SELECT *,
			ROW_NUMBER() OVER(PARTITION BY Month, year 
					ORDER BY Total_Sales DESC) AS Rank
			FROM monthly_sales
		) AS temp
	WHERE Rank = 1;
GO

-- Profit earned for each product category
GO
CREATE OR ALTER VIEW profit_per_product AS
WITH earnings AS (
SELECT p.Product_Name, 
	SUM(s.Units) AS Units_Sold,
	ROUND(SUM(s.Units * p.Product_Price), 2) AS Revenue, 
	ROUND(SUM(s.Units * p.Product_Cost), 2) AS Cost
	FROM products p
	INNER JOIN sales s ON p.Product_ID = s.Product_ID
	GROUP BY p.Product_Name
)
SELECT Product_Name, Units_Sold,
	ROUND(Revenue - Cost, 2) AS Profit
	FROM earnings;
GO

-- Top 3 products sold in each store
GO
CREATE OR ALTER VIEW top_products_sold AS
WITH top_sold_product AS (
	SELECT p.Product_Name, sr.Store_Name, SUM(s.Units) AS units_sold,
		ROW_NUMBER() OVER(PARTITION BY sr.Store_Name 
			ORDER BY SUM(s.Units) DESC) AS ranking
		FROM sales s INNER JOIN products p
		ON s.Product_ID = p.Product_ID
		INNER JOIN stores sr
		ON s.Store_ID = sr.Store_ID
		GROUP BY p.Product_Name, sr.Store_Name
)
SELECT Product_Name, Store_Name, units_sold 
	FROM top_sold_product
	WHERE ranking < 4;
GO

-- Sales every year/quarter/month
GO
CREATE OR ALTER VIEW overall_sales AS
SELECT date_year AS Year, date_qtr AS Quarter, date_month AS Month,
		ROUND(SUM(Units * product_Price), 2) AS Total_Sales
	FROM sales s
	INNER JOIN products p
	ON s.Product_ID = p.Product_ID
	GROUP BY date_year, date_qtr, date_month;
GO




	
	



